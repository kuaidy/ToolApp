#pragma checksum "C:\Program Files\Git\myproject\ToolApp\Pages\EncodeDecode.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "fbb4f02baadbb61861e3ac505141bdfba9b0b962"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(ToolApp.Pages.Pages_EncodeDecode), @"mvc.1.0.razor-page", @"/Pages/EncodeDecode.cshtml")]
namespace ToolApp.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Program Files\Git\myproject\ToolApp\Pages\_ViewImports.cshtml"
using ToolApp;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"fbb4f02baadbb61861e3ac505141bdfba9b0b962", @"/Pages/EncodeDecode.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a5712624ab805f6fbde6dd373e7cd3a04d8b8bf6", @"/Pages/_ViewImports.cshtml")]
    public class Pages_EncodeDecode : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "C:\Program Files\Git\myproject\ToolApp\Pages\EncodeDecode.cshtml"
  
    ViewData["Title"] = "编码解码";

#line default
#line hidden
#nullable disable
            WriteLiteral("<div class=\"text-left\">\r\n    <h3>");
#nullable restore
#line 7 "C:\Program Files\Git\myproject\ToolApp\Pages\EncodeDecode.cshtml"
   Write(ViewData["Title"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</h3>
    <div class=""Code_Option"">
        <strong>输入</strong>
        <textarea name=""CodeInput"" id=""CodeInput"" cols=""30"" rows=""10""></textarea>
        <ul class=""Code_OptionButton"">
            <li>
                <button onclick=""BtnClear()"">清空内容</button>
            </li>
            <li>
                <button onclick=""UrlEncode()"">URL编码</button>
            </li>
            <li>
                <button onclick=""UrlDecode()"">URL解码</button>
            </li>
            <li>
                <button onclick=""BaseEncode()"">BASE64编码</button>
            </li>
            <li>
                <button onclick=""BaseDecode()"">BASE64解码</button>
            </li>
        </ul>
        <strong>输出</strong>
        <textarea name=""CodeOutput"" id=""CodeOutput"" cols=""30"" rows=""10""></textarea>
    </div>
    <div id=""content_view"">      
        <textarea id=""content_editor"" style=""display:none;"">");
#nullable restore
#line 32 "C:\Program Files\Git\myproject\ToolApp\Pages\EncodeDecode.cshtml"
                                                       Write(ViewData["Content"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</textarea>
    </div>
</div>
<script>
    $inputObj=document.getElementById(""CodeInput"");
    $outputObj=document.getElementById(""CodeOutput"");
    function UrlEncode(){
        $outputObj.value=encodeURI($inputObj.value);
    }
    function UrlDecode(){
        $outputObj.value=decodeURI($inputObj.value);
    }
    function BtnClear(){
        $inputObj.value="""";
        $outputObj.value="""";
    }
    //base64编码
    function BaseEncode(){
        $outputObj.value=Base64.encode($inputObj.value);
    }
    //base64解码
    function BaseDecode(){
        $outputObj.value=Base64.decode($inputObj.value);
    }
    //base64编码解码
    var Base64 = {
	    _keyStr: ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="",
        encode: function(e) {
            var t = """";
            var n, r, i, s, o, u, a;
            var f = 0;
            e = Base64._utf8_encode(e);
            while (f < e.length) {
                n = e.charCodeAt(f++);
                r = e.charCode");
            WriteLiteral(@"At(f++);
                i = e.charCodeAt(f++);
                s = n >> 2;
                o = (n & 3) << 4 | r >> 4;
                u = (r & 15) << 2 | i >> 6;
                a = i & 63;
                if (isNaN(r)) {
                    u = a = 64
                } else if (isNaN(i)) {
                    a = 64
                }
                t = t + this._keyStr.charAt(s) + this._keyStr.charAt(o) + this._keyStr.charAt(u) + this._keyStr.charAt(a)
            }
            return t
        },
        decode: function(e) {
            var t = """";
            var n, r, i;
            var s, o, u, a;
            var f = 0;
            e = e.replace(/[^A-Za-z0-9+/=]/g, """");
            while (f < e.length) {
                s = this._keyStr.indexOf(e.charAt(f++));
                o = this._keyStr.indexOf(e.charAt(f++));
                u = this._keyStr.indexOf(e.charAt(f++));
                a = this._keyStr.indexOf(e.charAt(f++));
                n = s << 2 | o >> 4;
          ");
            WriteLiteral(@"      r = (o & 15) << 4 | u >> 2;
                i = (u & 3) << 6 | a;
                t = t + String.fromCharCode(n);
                if (u != 64) {
                    t = t + String.fromCharCode(r)
                }
                if (a != 64) {
                    t = t + String.fromCharCode(i)
                }
            }
            t = Base64._utf8_decode(t);
            return t
        },
        _utf8_encode: function(e) {
            e = e.replace(/rn/g, ""n"");
            var t = """";
            for (var n = 0; n < e.length; n++) {
                var r = e.charCodeAt(n);
                if (r < 128) {
                    t += String.fromCharCode(r)
                } else if (r > 127 && r < 2048) {
                    t += String.fromCharCode(r >> 6 | 192);
                    t += String.fromCharCode(r & 63 | 128)
                } else {
                    t += String.fromCharCode(r >> 12 | 224);
                    t += String.fromCharCode(r >> 6 & 63 | 128);
    ");
            WriteLiteral(@"                t += String.fromCharCode(r & 63 | 128)
                }
            }
            return t
        },
        _utf8_decode: function(e) {
            var t = """";
            var n = 0;
            var r = c1 = c2 = 0;
            while (n < e.length) {
                r = e.charCodeAt(n);
                if (r < 128) {
                    t += String.fromCharCode(r);
                    n++
                } else if (r > 191 && r < 224) {
                    c2 = e.charCodeAt(n + 1);
                    t += String.fromCharCode((r & 31) << 6 | c2 & 63);
                    n += 2
                } else {
                    c2 = e.charCodeAt(n + 1);
                    c3 = e.charCodeAt(n + 2);
                    t += String.fromCharCode((r & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
                    n += 3
                }
            }
            return t
        }
    }
</script>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<EncodeDecodeModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<EncodeDecodeModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<EncodeDecodeModel>)PageContext?.ViewData;
        public EncodeDecodeModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
