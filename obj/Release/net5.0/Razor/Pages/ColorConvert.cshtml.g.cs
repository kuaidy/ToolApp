#pragma checksum "C:\Program Files\Git\myproject\ToolApp\Pages\ColorConvert.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "15a4686466c031a31f65b133104e85907318cccc"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(ToolApp.Pages.Pages_ColorConvert), @"mvc.1.0.razor-page", @"/Pages/ColorConvert.cshtml")]
namespace ToolApp.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Program Files\Git\myproject\ToolApp\Pages\_ViewImports.cshtml"
using ToolApp;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"15a4686466c031a31f65b133104e85907318cccc", @"/Pages/ColorConvert.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a5712624ab805f6fbde6dd373e7cd3a04d8b8bf6", @"/Pages/_ViewImports.cshtml")]
    public class Pages_ColorConvert : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "C:\Program Files\Git\myproject\ToolApp\Pages\ColorConvert.cshtml"
  
    ViewData["Title"] = "颜色值转换";

#line default
#line hidden
#nullable disable
            WriteLiteral("<div class=\"text-left\">\r\n    <h3>");
#nullable restore
#line 7 "C:\Program Files\Git\myproject\ToolApp\Pages\ColorConvert.cshtml"
   Write(ViewData["Title"]);

#line default
#line hidden
#nullable disable
            WriteLiteral("</h3>\r\n    <div class=\"color-content\">\r\n        <strong>输入颜色值</strong>\r\n        <div class=\"div-input\">\r\n            <input type=\"text\"");
            BeginWriteAttribute("name", " name=\"", 260, "\"", 267, 0);
            EndWriteAttribute();
            WriteLiteral(@" id=""ip-colorvalue"" class=""ip-colorvalue"">
            <button onclick=""ColorConvert()"">转换</button>
        </div>
        <strong>转换结果</strong>
        <div class=""div-output"">
            <span class=""div-outspan"" >十六进制</span>
            <input type=""text"" class=""ip-colorvalue"" id=""ip-coloroutput16"" readonly=""readonly"">
            <span class=""div-outspan"" >RGB颜色值</span>
            <input type=""text"" class=""ip-colorvalue"" id=""ip-coloroutputrgb"" readonly=""readonly"">
            <span>颜色预览</span>
            <input type=""color"" class=""ip-colorvalue"" id=""ip-colorview"" readonly=""readonly"">
        </div>
    </div>
</div>

<script>
    function ColorConvert(){
        var inputColor=$(""#ip-colorvalue"").val();

        inputColor=inputColor.replace(""#"","""");
        if(inputColor.length==6){
            var colorr=inputColor.substring(0,2);
            var colorg=inputColor.substring(2,4);
            var colorb=inputColor.substring(4,6);
            console.log(colorr);
            co");
            WriteLiteral(@"nsole.log(colorg);
            console.log(colorb);
            $(""#ip-coloroutput16"").val(""#""+colorr+colorg+colorb);
            $(""#ip-colorview"").val(""#""+colorr+colorg+colorb);
            colorr=parseInt(colorr,16).toString(10);
            colorg=parseInt(colorg,16).toString(10);
            colorb=parseInt(colorb,16).toString(10);
            $(""#ip-coloroutputrgb"").val(""rgb(""+colorr+"",""+colorg+"",""+colorb+"")"");
        }else if(inputColor.length==3)
        {
            var colorr=inputColor.substring(0,1);
            var colorg=inputColor.substring(1,2);
            var colorb=inputColor.substring(2,3);
            var relcolorr=colorr+colorr;
            var relcolorg=colorg+colorg;
            var relcolorb=colorb+colorb;
            $(""#ip-coloroutput16"").val(""#""+relcolorr+relcolorg+relcolorb);
            $(""#ip-colorview"").val(""#""+relcolorr+relcolorg+relcolorb);
            relcolorr=parseInt(relcolorr,16).toString(10);    
            relcolorg=parseInt(relcolorg,16).toString");
            WriteLiteral(@"(10);
            relcolorb=parseInt(relcolorb,16).toString(10);
            $(""#ip-coloroutputrgb"").val(""rgb(""+relcolorr+"",""+relcolorg+"",""+relcolorb+"")"");
        }else if(inputColor.indexOf(""rgb"")!=-1){
            inputColor=inputColor.replace(""rgb"","""").replace(""("","""").replace("")"","""").replace(""，"","","");
            var colorArr=inputColor.split("","");
            $(""#ip-coloroutputrgb"").val(""rgb(""+colorArr[0]+"",""+colorArr[1]+"",""+colorArr[2]+"")"");
            var relcolorr=parseInt(colorArr[0],10).toString(16);
            if(relcolorr.length==1){
                relcolorr=""0""+relcolorr;
            }
            var relcolorg=parseInt(colorArr[1],10).toString(16);
            if(relcolorg.length==1){
                relcolorg=""0""+relcolorg;
            } 
            var relcolorb=parseInt(colorArr[2],10).toString(16);
            if(relcolorb.length==1){
                relcolorb=""0""+relcolorb;
            } 
            $(""#ip-coloroutput16"").val(""#""+relcolorr+relcolorg+relcolorb);
    ");
            WriteLiteral("        $(\"#ip-colorview\").val(\"#\"+relcolorr+relcolorg+relcolorb);\r\n        }\r\n    }\r\n</script>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<EncodeDecodeModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<EncodeDecodeModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<EncodeDecodeModel>)PageContext?.ViewData;
        public EncodeDecodeModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
